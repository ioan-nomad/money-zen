<script lang="ts">
  import { onMount } from 'svelte';
  import { Database, type Transaction, type Category, type Account } from './database';
  import jsPDF from 'jspdf';
  import autoTable from 'jspdf-autotable';

  let transactions: Transaction[] = [];
  let filteredTransactions: Transaction[] = [];
  let categories: Category[] = [];
  let accounts: Account[] = [];
  let error = '';

  // Report filter state
  let reportType: 'all' | 'monthly' | 'account' | 'category' | 'date_range' = 'all';
  let selectedYear: number = new Date().getFullYear();
  let selectedMonth: number = new Date().getMonth() + 1;
  let selectedAccountId: string = '';
  let selectedCategoryId: string = '';
  let startDate: string = '';
  let endDate: string = '';

  // Analytics data
  let totalIncome = 0;
  let totalExpense = 0;
  let spendingByCategory: { name: string; amount: number; color: string }[] = [];
  let transactionCount = 0;

  onMount(async () => {
    await loadData();
  });

  async function loadData() {
    try {
      transactions = await Database.getTransactions();
      categories = await Database.getCategories();
      accounts = await Database.getAccounts();
      await applyFilters();
    } catch (err) {
      error = String(err);
    }
  }

  async function applyFilters() {
    try {
      switch (reportType) {
        case 'monthly':
          filteredTransactions = await Database.getTransactionsByMonth(selectedYear, selectedMonth);
          break;
        case 'account':
          if (selectedAccountId) {
            filteredTransactions = await Database.getTransactionsByAccount(selectedAccountId);
          } else {
            filteredTransactions = transactions;
          }
          break;
        case 'category':
          if (selectedCategoryId) {
            filteredTransactions = await Database.getTransactionsByCategory(selectedCategoryId);
          } else {
            filteredTransactions = transactions;
          }
          break;
        case 'date_range':
          if (startDate && endDate) {
            filteredTransactions = await Database.getTransactionsByDateRange(
              new Date(startDate).toISOString(),
              new Date(endDate + 'T23:59:59').toISOString()
            );
          } else {
            filteredTransactions = transactions;
          }
          break;
        default:
          filteredTransactions = transactions;
      }
      calculateAnalytics();
    } catch (err) {
      error = String(err);
    }
  }

  function calculateAnalytics() {
    transactionCount = filteredTransactions.length;

    totalIncome = filteredTransactions
      .filter(t => t.transaction_type === 'income')
      .reduce((sum, t) => sum + t.amount, 0);

    totalExpense = filteredTransactions
      .filter(t => t.transaction_type === 'expense')
      .reduce((sum, t) => sum + t.amount, 0);

    // Spending by category
    const categoryMap = new Map<string, number>();
    filteredTransactions
      .filter(t => t.transaction_type === 'expense')
      .forEach(t => {
        const current = categoryMap.get(t.category_id) || 0;
        categoryMap.set(t.category_id, current + t.amount);
      });

    spendingByCategory = Array.from(categoryMap.entries())
      .map(([catId, amount]) => {
        const cat = categories.find(c => c.id === catId);
        return {
          name: cat ? `${cat.icon} ${cat.name}` : 'Unknown',
          amount,
          color: cat?.color || '#666'
        };
      })
      .sort((a, b) => b.amount - a.amount)
      .slice(0, 5); // Top 5
  }

  function getReportTitle(): string {
    switch (reportType) {
      case 'monthly':
        return `Monthly Report - ${selectedYear}/${selectedMonth.toString().padStart(2, '0')}`;
      case 'account':
        const account = accounts.find(a => a.id === selectedAccountId);
        return `Account Report - ${account?.name || 'All Accounts'}`;
      case 'category':
        const category = categories.find(c => c.id === selectedCategoryId);
        return `Category Report - ${category?.name || 'All Categories'}`;
      case 'date_range':
        return `Date Range Report - ${startDate} to ${endDate}`;
      default:
        return 'Financial Report - All Transactions';
    }
  }

  function exportPDF() {
    const doc = new jsPDF();

    doc.setFontSize(20);
    doc.text('MoneyZen', 14, 22);

    doc.setFontSize(16);
    doc.text(getReportTitle(), 14, 32);

    doc.setFontSize(12);
    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 14, 42);
    doc.text(`Transactions: ${transactionCount}`, 14, 48);

    // Summary
    doc.setFontSize(14);
    doc.text('Summary', 14, 60);
    autoTable(doc, {
      startY: 65,
      head: [['Type', 'Amount']],
      body: [
        ['Total Income', `${totalIncome.toFixed(2)} RON`],
        ['Total Expense', `${totalExpense.toFixed(2)} RON`],
        ['Net Balance', `${(totalIncome - totalExpense).toFixed(2)} RON`]
      ]
    });

    // Top spending categories
    if (spendingByCategory.length > 0) {
      doc.text('Top Spending Categories', 14, doc.lastAutoTable.finalY + 15);
      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [['Category', 'Amount']],
        body: spendingByCategory.map(c => [c.name, `${c.amount.toFixed(2)} RON`])
      });
    }

    // Detailed transactions (last 10)
    if (filteredTransactions.length > 0) {
      doc.text('Recent Transactions', 14, doc.lastAutoTable.finalY + 15);
      const recentTransactions = filteredTransactions.slice(0, 10);
      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 20,
        head: [['Date', 'Description', 'Type', 'Amount']],
        body: recentTransactions.map(t => [
          new Date(t.date).toLocaleDateString(),
          t.description,
          t.transaction_type,
          `${t.amount.toFixed(2)} RON`
        ])
      });
    }

    const filename = `moneyzen-${reportType}-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(filename);
  }
</script>

<div class="max-w-6xl mx-auto p-6 space-y-6">
  <div class="flex justify-between items-center">
    <h1 class="text-4xl font-bold">Analytics</h1>
    <button class="btn btn-primary" on:click={exportPDF}>
      ðŸ“„ Export PDF Report
    </button>
  </div>

  {#if error}
    <div class="alert alert-error"><span>{error}</span></div>
  {/if}

  <!-- Report Filter Controls -->
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <h2 class="card-title">Report Filters</h2>

      <!-- Report Type Selector -->
      <div class="form-control w-full max-w-xs">
        <label class="label">
          <span class="label-text">Report Type</span>
        </label>
        <select class="select select-bordered" bind:value={reportType} on:change={applyFilters}>
          <option value="all">All Transactions</option>
          <option value="monthly">Monthly</option>
          <option value="account">By Account</option>
          <option value="category">By Category</option>
          <option value="date_range">Date Range</option>
        </select>
      </div>

      <!-- Conditional Filter Controls -->
      <div class="flex flex-wrap gap-4 mt-4">
        {#if reportType === 'monthly'}
          <div class="form-control">
            <label class="label">
              <span class="label-text">Year</span>
            </label>
            <input
              type="number"
              class="input input-bordered w-24"
              bind:value={selectedYear}
              on:change={applyFilters}
              min="2020"
              max="2030"
            />
          </div>
          <div class="form-control">
            <label class="label">
              <span class="label-text">Month</span>
            </label>
            <select class="select select-bordered" bind:value={selectedMonth} on:change={applyFilters}>
              <option value={1}>January</option>
              <option value={2}>February</option>
              <option value={3}>March</option>
              <option value={4}>April</option>
              <option value={5}>May</option>
              <option value={6}>June</option>
              <option value={7}>July</option>
              <option value={8}>August</option>
              <option value={9}>September</option>
              <option value={10}>October</option>
              <option value={11}>November</option>
              <option value={12}>December</option>
            </select>
          </div>
        {:else if reportType === 'account'}
          <div class="form-control">
            <label class="label">
              <span class="label-text">Account</span>
            </label>
            <select class="select select-bordered" bind:value={selectedAccountId} on:change={applyFilters}>
              <option value="">All Accounts</option>
              {#each accounts as account}
                <option value={account.id}>{account.name}</option>
              {/each}
            </select>
          </div>
        {:else if reportType === 'category'}
          <div class="form-control">
            <label class="label">
              <span class="label-text">Category</span>
            </label>
            <select class="select select-bordered" bind:value={selectedCategoryId} on:change={applyFilters}>
              <option value="">All Categories</option>
              {#each categories as category}
                <option value={category.id}>{category.icon} {category.name}</option>
              {/each}
            </select>
          </div>
        {:else if reportType === 'date_range'}
          <div class="form-control">
            <label class="label">
              <span class="label-text">Start Date</span>
            </label>
            <input
              type="date"
              class="input input-bordered"
              bind:value={startDate}
              on:change={applyFilters}
            />
          </div>
          <div class="form-control">
            <label class="label">
              <span class="label-text">End Date</span>
            </label>
            <input
              type="date"
              class="input input-bordered"
              bind:value={endDate}
              on:change={applyFilters}
            />
          </div>
        {/if}
      </div>

      <!-- Preview Section -->
      <div class="mt-4 p-4 bg-base-200 rounded-lg">
        <h3 class="font-semibold mb-2">Report Preview</h3>
        <div class="stats shadow">
          <div class="stat">
            <div class="stat-title">Transactions</div>
            <div class="stat-value text-primary">{transactionCount}</div>
          </div>
          <div class="stat">
            <div class="stat-title">Total Income</div>
            <div class="stat-value text-success">{totalIncome.toFixed(2)} RON</div>
          </div>
          <div class="stat">
            <div class="stat-title">Total Expense</div>
            <div class="stat-value text-error">{totalExpense.toFixed(2)} RON</div>
          </div>
          <div class="stat">
            <div class="stat-title">Net Balance</div>
            <div class="stat-value {(totalIncome - totalExpense) >= 0 ? 'text-success' : 'text-error'}">
              {(totalIncome - totalExpense).toFixed(2)} RON
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Summary Cards -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="card bg-success text-success-content">
      <div class="card-body">
        <h2 class="card-title">Total Income</h2>
        <p class="text-3xl font-bold">{totalIncome.toFixed(2)} RON</p>
      </div>
    </div>
    <div class="card bg-error text-error-content">
      <div class="card-body">
        <h2 class="card-title">Total Expense</h2>
        <p class="text-3xl font-bold">{totalExpense.toFixed(2)} RON</p>
      </div>
    </div>
    <div class="card bg-info text-info-content">
      <div class="card-body">
        <h2 class="card-title">Net Balance</h2>
        <p class="text-3xl font-bold">{(totalIncome - totalExpense).toFixed(2)} RON</p>
      </div>
    </div>
  </div>

  <!-- Top Categories -->
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <h2 class="card-title">Top 5 Spending Categories</h2>
      <div class="space-y-3">
        {#each spendingByCategory as category}
          <div>
            <div class="flex justify-between mb-1">
              <span>{category.name}</span>
              <span class="font-bold">{category.amount.toFixed(2)} RON</span>
            </div>
            <progress 
              class="progress progress-primary w-full" 
              value={category.amount} 
              max={spendingByCategory[0]?.amount || 1}
            ></progress>
          </div>
        {/each}
      </div>
    </div>
  </div>
</div>
